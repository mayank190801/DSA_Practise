import java.util.*;
import java.io.*;

public class minMalwareSpread {
    public static void main(String[] args) {
        
    }
    public static int find(int[] par, int u){
        return par[u] == u ? u : (par[u] = find(par, par[u]));  //pretty single line logic
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        //making a dsu for sure, in this one
        int n = graph.length;
        int[] par = new int[n];
        int[] rank = new int[n];

        for(int i= 0; i < n; i++){
            par[i] = i;
            rank[i] = 1;
        }

        for(int i= 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(graph[i][j] == 0) continue;
                
                int p1 = find(par, i);
                int p2 = find(par, j);

                if(p1 == p2) continue;
                int r1 = rank[p1];
                int r2 = rank[p2];

                if(r1 < r2){
                    par[p1] = p2; 
                    rank[p2] = r1 + r2;
                }else{
                    par[p2] = p1;
                    rank[p1] = r1 + r2;
                }
            }
        }
        
        //after this it is pretty simple for sure
        Arrays.sort(initial);
        int[] parents = new int[n];
        for(int i : initial){
            parents[find(par, i)]++;
        }

        int ans = -1;  //return the node which could be removed for sure
        int node = -1;
        for(int i = 0; i < initial.length; i++){
            int curr = initial[i];
            if(parents[par[curr]] == 1){
                int size = rank[par[curr]];
                if(size > ans){
                    node = curr;
                    ans = size;
                }
            }
        }

        return node == -1 ? initial[0] : node;
    }
}
